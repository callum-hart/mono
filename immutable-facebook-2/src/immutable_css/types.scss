/**
    Types --

    Specical functions that add types to CSS declarations.

    A type is bound to a CSS declaration within a ruleset.

    Each type has a set of laws that determine how the declaration
    can subsequently be used / modified.

    By design type functions are pure. They cannot modify values
    passed as arguments, and cannot add additional CSS properties.
    This gaurentees what styles are applied, which reduces side
    effects.

    Types are denoted using capitalized function names.

*/


/**
    @type: Immutable
    @description: Immutable declarations can only be set once. They
    cannot be modified after creation.
    @throws: some error name
    @usage:

    .foo {
        height: Immutable(100px);
    }

    The height of `.foo` is locked â€“ it cannot be changed.

*/
@function Immutable($value) {
    // Only append debug flags when env variable is set...
    @return append($value, #{'/* Immutable */'});
}

/**
    @type: Protected
    @description: Protected declarations can only be modified by
    pseudo-classes derived from the same selector.
    @modifier: --override
    @throws: some error name
    @usage:

    .foo {
       color: Protected(grey);
    }

    .foo:hover {
       color: --override(grey);
    }

*/
@function Protected($value) {
    @return append($value, #{'/* Protected */'});
}

/**
    @type: Public (perhaps better name is Exposed?)
    @description: Public declarations can only be modified by
    pseudo and modifier classes derived from parent selectors.
    @modifier: --mutate
    @throws: some error name
    @usage:

    .bar {
         background: Public(white);
    }

    1. Pseudo-class

    .foo:hover .bar {
       background: --mutate(grey);
    }

    2. Modifier class

    .foo.foo--withError .bar {
       background: --mutate(red);
    }

*/
@function Public($value) {
    @return append($value, #{'/* Public */'});
}

/**
    @type: Fallback
    @description: Fallback declarations allow multiple implementations
    of the same CSS property. They can only be used for fallbacks.
    @throws: some error name
    @usage:

    .foo {
        background: Fallback(grey);
        background: Immutable(linear-gradient(white, black));
    }

*/
@function Fallback($value) {
    @return append($value, #{'/* Fallback */'});
}

/**
    @type: Bound
    @description: Bound declarations are scoped within the breakpoints
    they are defined. A bound type can wrap other types.
    @args: CSS value or <Typed>CSS value.
    @throws: some error name
    @usage:

    1. CSS value

    .pow {
        @media(max-width: 500px) {
            font-size: Bound(12px);
        }

        @media(min-width: 500px) {
            font-size: Bound(16px);
        }
    }

    2. <Typed>CSS value

    .bar {
        @media(max-width: 500px) {
            font-size: Bound(Immutable(12px));
        }

        @media(min-width: 500px) {
            font-size: Bound(Protected(12px));
        }
    }

    From zero to 500px the font-size of `.bar` is immutable. It
    cannot be modified within the breakpoint boundary.

    After 500px the font-size of `.bar` is protected. It would
    therefore be legal to override the font-size from a pseudo-class:

    .bar:hover {
        @media(min-width: 500px) {
           font-size: --override(green);
       }
    }

*/
@function Bound($value) {
    @return append($value, #{'/* Bound */'});
}
