
/* Allows you to set multiple styles i.e:

.foo({
   COLOR: red;
   PADDING: 4px 10px;
});
*/

// For now use approach used for .foo and .bar mixins (rather than adding custom functions).

.foo(@ruleset) {
    // Force `@debug` variable to be scoped within mixin
    & when (true) {
        @debug: ~"/* immutable */";
        @ruleset();
    }
}

.bar(@ruleset) {
     & when (true) {
        // Force `@debug` variable to be scoped within mixin
        @debug: ~"/* protected */";
        @ruleset();
    }
}

.immutable(@property, @value) {
    // Would be nice to uppercase property name here
    @{property}: @value;

    &when(@__ENV = dev) {
        debug: "@{property} is immutable";
    }
}

.protected(@property, @value) {
    // Would be nice to capitalize property name here
     @{property}: @value;

     &when(@__ENV = dev) {
        debug: "@{property} is protected";
    }
}

.public(@property, @value) {
    // Need a way of denoting public properties (currently 2nd letter is uppercase)
     @{property}: @value;

     &when(@__ENV = dev) {
        debug: "@{property} is public";
    }
}

// Safely modify protected properties
.override(@property, @value) {
    @{property}: @value;

    &when(@__ENV = dev) {
        debug: "@{property} overriden by pseudo-class";
    }
}

// Safely modify public properties
.mutate(@property, @value) {
     @{property}: @value;

    &when(@__ENV = dev) {
        debug: "@{property} mutated by parent pseudo-class";
    }
}
